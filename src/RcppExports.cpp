// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// decompose_theta
arma::mat decompose_theta(const arma::mat& theta, int L);
RcppExport SEXP _glmcs_decompose_theta(SEXP thetaSEXP, SEXP LSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    rcpp_result_gen = Rcpp::wrap(decompose_theta(theta, L));
    return rcpp_result_gen;
END_RCPP
}
// univariate_loglik_cox
double univariate_loglik_cox(const arma::vec& x, const arma::mat& y, double theta, arma::vec offset, std::string ties);
RcppExport SEXP _glmcs_univariate_loglik_cox(SEXP xSEXP, SEXP ySEXP, SEXP thetaSEXP, SEXP offsetSEXP, SEXP tiesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< std::string >::type ties(tiesSEXP);
    rcpp_result_gen = Rcpp::wrap(univariate_loglik_cox(x, y, theta, offset, ties));
    return rcpp_result_gen;
END_RCPP
}
// univariate_loglik_glm
double univariate_loglik_glm(const arma::vec& x, const arma::vec& y, SEXP family, double theta, const arma::vec& offset, double intercept);
RcppExport SEXP _glmcs_univariate_loglik_glm(SEXP xSEXP, SEXP ySEXP, SEXP familySEXP, SEXP thetaSEXP, SEXP offsetSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type family(familySEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< double >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(univariate_loglik_glm(x, y, family, theta, offset, intercept));
    return rcpp_result_gen;
END_RCPP
}
// univariate_loglik
double univariate_loglik(const arma::vec& x, SEXP y, SEXP family, double theta, const arma::vec& offset, double intercept, std::string ties);
RcppExport SEXP _glmcs_univariate_loglik(SEXP xSEXP, SEXP ySEXP, SEXP familySEXP, SEXP thetaSEXP, SEXP offsetSEXP, SEXP interceptSEXP, SEXP tiesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type family(familySEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< double >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< std::string >::type ties(tiesSEXP);
    rcpp_result_gen = Rcpp::wrap(univariate_loglik(x, y, family, theta, offset, intercept, ties));
    return rcpp_result_gen;
END_RCPP
}
// univariate_irls_cox
double univariate_irls_cox(arma::vec x, arma::mat y, arma::vec offset, std::string ties, double lambda, double tau, int max_iter, double tol);
RcppExport SEXP _glmcs_univariate_irls_cox(SEXP xSEXP, SEXP ySEXP, SEXP offsetSEXP, SEXP tiesSEXP, SEXP lambdaSEXP, SEXP tauSEXP, SEXP max_iterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< std::string >::type ties(tiesSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(univariate_irls_cox(x, y, offset, ties, lambda, tau, max_iter, tol));
    return rcpp_result_gen;
END_RCPP
}
// univariate_irls_glm_no_intercept
double univariate_irls_glm_no_intercept(const arma::vec& x, const arma::vec& y, SEXP family, arma::vec offset, int max_iter, double tol);
RcppExport SEXP _glmcs_univariate_irls_glm_no_intercept(SEXP xSEXP, SEXP ySEXP, SEXP familySEXP, SEXP offsetSEXP, SEXP max_iterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type family(familySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(univariate_irls_glm_no_intercept(x, y, family, offset, max_iter, tol));
    return rcpp_result_gen;
END_RCPP
}
// univariate_irls_glm
Rcpp::List univariate_irls_glm(const arma::vec& x, const arma::vec& y, SEXP family, arma::vec offset, int max_iter, double tol);
RcppExport SEXP _glmcs_univariate_irls_glm(SEXP xSEXP, SEXP ySEXP, SEXP familySEXP, SEXP offsetSEXP, SEXP max_iterSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type family(familySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(univariate_irls_glm(x, y, family, offset, max_iter, tol));
    return rcpp_result_gen;
END_RCPP
}
// univariate_fit
List univariate_fit(const arma::vec& x, SEXP y, SEXP family, arma::vec offset, bool standardize, std::string ties, double lambda, double tau);
RcppExport SEXP _glmcs_univariate_fit(SEXP xSEXP, SEXP ySEXP, SEXP familySEXP, SEXP offsetSEXP, SEXP standardizeSEXP, SEXP tiesSEXP, SEXP lambdaSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type family(familySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< std::string >::type ties(tiesSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(univariate_fit(x, y, family, offset, standardize, ties, lambda, tau));
    return rcpp_result_gen;
END_RCPP
}
// single_effect_fit
Rcpp::List single_effect_fit(const arma::mat& X, SEXP y, SEXP family, arma::vec offset, bool standardize, bool shrinkage, std::string ties, double lambda, double tau, double alpha);
RcppExport SEXP _glmcs_single_effect_fit(SEXP XSEXP, SEXP ySEXP, SEXP familySEXP, SEXP offsetSEXP, SEXP standardizeSEXP, SEXP shrinkageSEXP, SEXP tiesSEXP, SEXP lambdaSEXP, SEXP tauSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< SEXP >::type family(familySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type offset(offsetSEXP);
    Rcpp::traits::input_parameter< bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< bool >::type shrinkage(shrinkageSEXP);
    Rcpp::traits::input_parameter< std::string >::type ties(tiesSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(single_effect_fit(X, y, family, offset, standardize, shrinkage, ties, lambda, tau, alpha));
    return rcpp_result_gen;
END_RCPP
}
// additive_effect_fit
List additive_effect_fit(const arma::mat& X, SEXP y, int L, SEXP family, bool standardize, std::string ties, double lambda, double tau, bool decompose, bool shrinkage, double alpha, double tol, int max_iter);
RcppExport SEXP _glmcs_additive_effect_fit(SEXP XSEXP, SEXP ySEXP, SEXP LSEXP, SEXP familySEXP, SEXP standardizeSEXP, SEXP tiesSEXP, SEXP lambdaSEXP, SEXP tauSEXP, SEXP decomposeSEXP, SEXP shrinkageSEXP, SEXP alphaSEXP, SEXP tolSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< SEXP >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type L(LSEXP);
    Rcpp::traits::input_parameter< SEXP >::type family(familySEXP);
    Rcpp::traits::input_parameter< bool >::type standardize(standardizeSEXP);
    Rcpp::traits::input_parameter< std::string >::type ties(tiesSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< bool >::type decompose(decomposeSEXP);
    Rcpp::traits::input_parameter< bool >::type shrinkage(shrinkageSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(additive_effect_fit(X, y, L, family, standardize, ties, lambda, tau, decompose, shrinkage, alpha, tol, max_iter));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_glmcs_decompose_theta", (DL_FUNC) &_glmcs_decompose_theta, 2},
    {"_glmcs_univariate_loglik_cox", (DL_FUNC) &_glmcs_univariate_loglik_cox, 5},
    {"_glmcs_univariate_loglik_glm", (DL_FUNC) &_glmcs_univariate_loglik_glm, 6},
    {"_glmcs_univariate_loglik", (DL_FUNC) &_glmcs_univariate_loglik, 7},
    {"_glmcs_univariate_irls_cox", (DL_FUNC) &_glmcs_univariate_irls_cox, 8},
    {"_glmcs_univariate_irls_glm_no_intercept", (DL_FUNC) &_glmcs_univariate_irls_glm_no_intercept, 6},
    {"_glmcs_univariate_irls_glm", (DL_FUNC) &_glmcs_univariate_irls_glm, 6},
    {"_glmcs_univariate_fit", (DL_FUNC) &_glmcs_univariate_fit, 8},
    {"_glmcs_single_effect_fit", (DL_FUNC) &_glmcs_single_effect_fit, 10},
    {"_glmcs_additive_effect_fit", (DL_FUNC) &_glmcs_additive_effect_fit, 13},
    {NULL, NULL, 0}
};

RcppExport void R_init_glmcs(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
